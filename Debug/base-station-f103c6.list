
base-station-f103c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080037ac  080037ac  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037ac  080037ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000014  080037c8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080037c8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a72  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001708a  00000000  00000000  0002d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c5  00000000  00000000  00044892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824a1  00000000  00000000  0004f157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d15f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000d1648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003758 	.word	0x08003758

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003758 	.word	0x08003758

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff2f 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8a5 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f967 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f947 	bl	80003f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000162:	f000 f8e5 	bl	8000330 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f919 	bl	800039c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(rx_node_addr, 0xE7, 5);
 800016a:	2205      	movs	r2, #5
 800016c:	21e7      	movs	r1, #231	; 0xe7
 800016e:	4841      	ldr	r0, [pc, #260]	; (8000274 <main+0x128>)
 8000170:	f003 faea 	bl	8003748 <memset>

  nRF24_HW_Init(&tx_device, &hspi1, GPIOB, GPIO_PIN_0, GPIOA, GPIO_PIN_4);
 8000174:	2310      	movs	r3, #16
 8000176:	9301      	str	r3, [sp, #4]
 8000178:	4b3f      	ldr	r3, [pc, #252]	; (8000278 <main+0x12c>)
 800017a:	9300      	str	r3, [sp, #0]
 800017c:	2301      	movs	r3, #1
 800017e:	4a3f      	ldr	r2, [pc, #252]	; (800027c <main+0x130>)
 8000180:	493f      	ldr	r1, [pc, #252]	; (8000280 <main+0x134>)
 8000182:	4840      	ldr	r0, [pc, #256]	; (8000284 <main+0x138>)
 8000184:	f000 fa95 	bl	80006b2 <nRF24_HW_Init>
  nRF24_Init(&tx_device);
 8000188:	483e      	ldr	r0, [pc, #248]	; (8000284 <main+0x138>)
 800018a:	f000 fb7e 	bl	800088a <nRF24_Init>
  nRF24_SetAddr(&tx_device, nRF24_PIPETX, rx_node_addr);
 800018e:	4a39      	ldr	r2, [pc, #228]	; (8000274 <main+0x128>)
 8000190:	2106      	movs	r1, #6
 8000192:	483c      	ldr	r0, [pc, #240]	; (8000284 <main+0x138>)
 8000194:	f000 fc24 	bl	80009e0 <nRF24_SetAddr>
  //nRF24_SetRFChannel(&tx_device, 0);
  nRF24_SetRXPipe(&tx_device, nRF24_PIPE0, nRF24_AA_OFF, 32);
 8000198:	2320      	movs	r3, #32
 800019a:	2200      	movs	r2, #0
 800019c:	2100      	movs	r1, #0
 800019e:	4839      	ldr	r0, [pc, #228]	; (8000284 <main+0x138>)
 80001a0:	f000 fccc 	bl	8000b3c <nRF24_SetRXPipe>
  nRF24_DisableAA(&tx_device, nRF24_PIPETX);
 80001a4:	2106      	movs	r1, #6
 80001a6:	4837      	ldr	r0, [pc, #220]	; (8000284 <main+0x138>)
 80001a8:	f000 fd24 	bl	8000bf4 <nRF24_DisableAA>
  nRF24_SetPowerMode(&tx_device, nRF24_PWR_UP);
 80001ac:	2102      	movs	r1, #2
 80001ae:	4835      	ldr	r0, [pc, #212]	; (8000284 <main+0x138>)
 80001b0:	f000 fbd0 	bl	8000954 <nRF24_SetPowerMode>
  nRF24_SetOperationalMode(&tx_device, nRF24_MODE_TX);
 80001b4:	2100      	movs	r1, #0
 80001b6:	4833      	ldr	r0, [pc, #204]	; (8000284 <main+0x138>)
 80001b8:	f000 fbee 	bl	8000998 <nRF24_SetOperationalMode>
  nRF24_SetOperationalMode(&rx_device, nRF24_MODE_RX);
  nRF24_RX_ON(&rx_device);
#endif

  // Link rx_buffer address to UART-DMARX
	HAL_UART_Receive_DMA(&huart1, serial_data, 64);
 80001bc:	2240      	movs	r2, #64	; 0x40
 80001be:	4932      	ldr	r1, [pc, #200]	; (8000288 <main+0x13c>)
 80001c0:	4832      	ldr	r0, [pc, #200]	; (800028c <main+0x140>)
 80001c2:	f002 fbd7 	bl	8002974 <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT | DMA_IT_TC);
 80001c6:	4b31      	ldr	r3, [pc, #196]	; (800028c <main+0x140>)
 80001c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b2f      	ldr	r3, [pc, #188]	; (800028c <main+0x140>)
 80001d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f022 0206 	bic.w	r2, r2, #6
 80001d8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE(huart1.hdmarx);
 80001da:	4b2c      	ldr	r3, [pc, #176]	; (800028c <main+0x140>)
 80001dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b2a      	ldr	r3, [pc, #168]	; (800028c <main+0x140>)
 80001e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f022 0201 	bic.w	r2, r2, #1
 80001ec:	601a      	str	r2, [r3, #0]

	// LISR must be cleared before re-enabling DMA stream
	__HAL_DMA_CLEAR_FLAG(huart1.hdmarx, DMA_FLAG_GL3);
 80001ee:	4b28      	ldr	r3, [pc, #160]	; (8000290 <main+0x144>)
 80001f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f4:	605a      	str	r2, [r3, #4]
	huart1.hdmarx->Instance->CNDTR = 64;
 80001f6:	4b25      	ldr	r3, [pc, #148]	; (800028c <main+0x140>)
 80001f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2240      	movs	r2, #64	; 0x40
 80001fe:	605a      	str	r2, [r3, #4]

	// Re-enable UART to listen Nextion again
	__HAL_DMA_ENABLE(huart1.hdmarx);
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <main+0x140>)
 8000202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b20      	ldr	r3, [pc, #128]	; (800028c <main+0x140>)
 800020a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f042 0201 	orr.w	r2, r2, #1
 8000212:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000214:	4b1d      	ldr	r3, [pc, #116]	; (800028c <main+0x140>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68da      	ldr	r2, [r3, #12]
 800021a:	4b1c      	ldr	r3, [pc, #112]	; (800028c <main+0x140>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f042 0210 	orr.w	r2, r2, #16
 8000222:	60da      	str	r2, [r3, #12]


  //nRF24_ReadMBReg(&rx_device, nRF24_REG_TX_ADDR, debug_reg, 5);
  nRF24_ReadMBReg(&tx_device, nRF24_REG_TX_ADDR, debug_reg, 5);
 8000224:	2305      	movs	r3, #5
 8000226:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <main+0x148>)
 8000228:	2110      	movs	r1, #16
 800022a:	4816      	ldr	r0, [pc, #88]	; (8000284 <main+0x138>)
 800022c:	f000 fada 	bl	80007e4 <nRF24_ReadMBReg>

  memset(serial_data, 3, 32);
 8000230:	2220      	movs	r2, #32
 8000232:	2103      	movs	r1, #3
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0x13c>)
 8000236:	f003 fa87 	bl	8003748 <memset>
  send_flag = SEND_FLAG_SET;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0x14c>)
 800023c:	2201      	movs	r2, #1
 800023e:	701a      	strb	r2, [r3, #0]
  serial_len = 32;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <main+0x150>)
 8000242:	2220      	movs	r2, #32
 8000244:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    status = nRF24_GetStatus(&tx_device);
 8000246:	480f      	ldr	r0, [pc, #60]	; (8000284 <main+0x138>)
 8000248:	f000 fcff 	bl	8000c4a <nRF24_GetStatus>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <main+0x154>)
 8000252:	701a      	strb	r2, [r3, #0]
    if (send_flag) {
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <main+0x14c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f3      	beq.n	8000246 <main+0xfa>
      nRF24_TxPacket(&tx_device, serial_data, serial_len);
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <main+0x150>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4908      	ldr	r1, [pc, #32]	; (8000288 <main+0x13c>)
 8000266:	4807      	ldr	r0, [pc, #28]	; (8000284 <main+0x138>)
 8000268:	f000 f962 	bl	8000530 <nRF24_TxPacket>
      send_flag = SEND_FLAG_RESET;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <main+0x14c>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
    status = nRF24_GetStatus(&tx_device);
 8000272:	e7e8      	b.n	8000246 <main+0xfa>
 8000274:	20000000 	.word	0x20000000
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000030 	.word	0x20000030
 8000284:	2000015c 	.word	0x2000015c
 8000288:	20000114 	.word	0x20000114
 800028c:	20000088 	.word	0x20000088
 8000290:	40020000 	.word	0x40020000
 8000294:	200001b4 	.word	0x200001b4
 8000298:	20000158 	.word	0x20000158
 800029c:	20000154 	.word	0x20000154
 80002a0:	20000159 	.word	0x20000159

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 fa48 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fc07 	bl	8001b00 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f8:	f000 f9b2 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fe74 	bl	8002004 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000322:	f000 f99d 	bl	8000660 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_SPI1_Init+0x64>)
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <MX_SPI1_Init+0x68>)
 8000338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_SPI1_Init+0x64>)
 800033c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_SPI1_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_SPI1_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_SPI1_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_SPI1_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_SPI1_Init+0x64>)
 800035c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000360:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_SPI1_Init+0x64>)
 8000364:	2210      	movs	r2, #16
 8000366:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_SPI1_Init+0x64>)
 800037c:	220a      	movs	r2, #10
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_SPI1_Init+0x64>)
 8000382:	f001 ffcd 	bl	8002320 <HAL_SPI_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800038c:	f000 f968 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000030 	.word	0x20000030
 8000398:	40013000 	.word	0x40013000

0800039c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART1_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART1_UART_Init+0x4c>)
 80003d4:	f002 fa7e 	bl	80028d4 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f93f 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000088 	.word	0x20000088
 80003ec:	40013800 	.word	0x40013800

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_DMA_Init+0x38>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <MX_DMA_Init+0x38>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_DMA_Init+0x38>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	200f      	movs	r0, #15
 8000414:	f000 ff07 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000418:	200f      	movs	r0, #15
 800041a:	f000 ff20 	bl	800125e <HAL_NVIC_EnableIRQ>

}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a36      	ldr	r2, [pc, #216]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000446:	f043 0310 	orr.w	r3, r3, #16
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <MX_GPIO_Init+0xf4>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <MX_GPIO_Init+0xf4>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <MX_GPIO_Init+0xf4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_GPIO_Init+0xf4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_GPIO_Init+0xf4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a24      	ldr	r2, [pc, #144]	; (8000520 <MX_GPIO_Init+0xf4>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b22      	ldr	r3, [pc, #136]	; (8000520 <MX_GPIO_Init+0xf4>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	603b      	str	r3, [r7, #0]
 800049e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80004a6:	481f      	ldr	r0, [pc, #124]	; (8000524 <MX_GPIO_Init+0xf8>)
 80004a8:	f001 fb12 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2118      	movs	r1, #24
 80004b0:	481d      	ldr	r0, [pc, #116]	; (8000528 <MX_GPIO_Init+0xfc>)
 80004b2:	f001 fb0d 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2103      	movs	r1, #3
 80004ba:	481c      	ldr	r0, [pc, #112]	; (800052c <MX_GPIO_Init+0x100>)
 80004bc:	f001 fb08 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <MX_GPIO_Init+0xf8>)
 80004da:	f001 f97d 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80004de:	2318      	movs	r3, #24
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <MX_GPIO_Init+0xfc>)
 80004f6:	f001 f96f 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004fa:	2303      	movs	r3, #3
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <MX_GPIO_Init+0x100>)
 8000512:	f001 f961 	bl	80017d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <nRF24_TxPacket>:

/* USER CODE BEGIN 4 */
void nRF24_TxPacket(nRF24_Handler_t *device, uint8_t* Buf, uint32_t Len) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4824      	ldr	r0, [pc, #144]	; (80005d4 <nRF24_TxPacket+0xa4>)
 8000544:	f001 fac4 	bl	8001ad0 <HAL_GPIO_WritePin>
	for(uint32_t i = 0; i < Len; i++)	{
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e00c      	b.n	8000568 <nRF24_TxPacket+0x38>
		device->tx_data[i] = *Buf++;
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	60ba      	str	r2, [r7, #8]
 8000554:	7819      	ldrb	r1, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	4413      	add	r3, r2
 800055c:	3316      	adds	r3, #22
 800055e:	460a      	mov	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < Len; i++)	{
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3ee      	bcc.n	800054e <nRF24_TxPacket+0x1e>
	}

	if(Len >= 24)	{
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b17      	cmp	r3, #23
 8000574:	d923      	bls.n	80005be <nRF24_TxPacket+0x8e>
		nRF24_WritePayload(device, device->tx_data, Len);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3316      	adds	r3, #22
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	4619      	mov	r1, r3
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f000 fba1 	bl	8000cc8 <nRF24_WritePayload>
		nRF24_CE_State(device, GPIO_PIN_SET);
 8000586:	2101      	movs	r1, #1
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f000 f86e 	bl	800066a <nRF24_CE_State>

		while(!(status & (nRF24_FLAG_TX_DS)))	{
 800058e:	e006      	b.n	800059e <nRF24_TxPacket+0x6e>
			status = nRF24_GetStatus(device);
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f000 fb5a 	bl	8000c4a <nRF24_GetStatus>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <nRF24_TxPacket+0xa8>)
 800059c:	701a      	strb	r2, [r3, #0]
		while(!(status & (nRF24_FLAG_TX_DS)))	{
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <nRF24_TxPacket+0xa8>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f2      	beq.n	8000590 <nRF24_TxPacket+0x60>
		}

		nRF24_ClearIRQFlags(device);
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f000 fb74 	bl	8000c98 <nRF24_ClearIRQFlags>
		nRF24_FlushTX(device);
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 fb57 	bl	8000c64 <nRF24_FlushTX>
		nRF24_CE_State(device, GPIO_PIN_RESET);
 80005b6:	2100      	movs	r1, #0
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f000 f856 	bl	800066a <nRF24_CE_State>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <nRF24_TxPacket+0xa4>)
 80005c6:	f001 fa83 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40011000 	.word	0x40011000
 80005d8:	20000159 	.word	0x20000159

080005dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_DMA_DISABLE(huart->hdmarx);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f022 0201 	bic.w	r2, r2, #1
 800060c:	601a      	str	r2, [r3, #0]

	// Store length of message before resetting NDTR
	serial_len = 64 - huart->hdmarx->Instance->CNDTR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_UART_RxCpltCallback+0x78>)
 800061c:	6013      	str	r3, [r2, #0]
	
	// LISR must be cleared before re-enabling DMA stream
  __HAL_DMA_CLEAR_FLAG(huart->hdmarx, DMA_FLAG_GL3);
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_UART_RxCpltCallback+0x7c>)
 8000620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000624:	605a      	str	r2, [r3, #4]
	huart->hdmarx->Instance->CNDTR = 64;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2240      	movs	r2, #64	; 0x40
 800062e:	605a      	str	r2, [r3, #4]

	// Re-enable UART
	__HAL_DMA_ENABLE(huart->hdmarx);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f042 0201 	orr.w	r2, r2, #1
 8000642:	601a      	str	r2, [r3, #0]
	send_flag = SEND_FLAG_SET;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_UART_RxCpltCallback+0x80>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000154 	.word	0x20000154
 8000658:	40020000 	.word	0x40020000
 800065c:	20000158 	.word	0x20000158

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>

0800066a <nRF24_CE_State>:
#include "nrf24.h"
#include <stdio.h>

void nRF24_CE_State(nRF24_Handler_t *device, GPIO_PinState state) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	460b      	mov	r3, r1
 8000674:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->ce_port, device->ce_pin, state);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	8a5b      	ldrh	r3, [r3, #18]
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	4619      	mov	r1, r3
 8000682:	f001 fa25 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <nRF24_CSN_State>:

void nRF24_CSN_State(nRF24_Handler_t *device, GPIO_PinState state) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(device->csn_port, device->csn_pin, state);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6858      	ldr	r0, [r3, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	8a1b      	ldrh	r3, [r3, #16]
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f001 fa13 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <nRF24_HW_Init>:

/* TODO: create structure that store every GPIO ports and pins */
void nRF24_HW_Init(nRF24_Handler_t *device, SPI_HandleTypeDef *hspi,
                   GPIO_TypeDef *csn_port, uint16_t csn_pin,
                   GPIO_TypeDef *ce_port, uint16_t ce_pin) {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	807b      	strh	r3, [r7, #2]
  /* Set SPI handler to device */
  device->hspi = hspi;                  
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	601a      	str	r2, [r3, #0]
  
  device->csn_port = csn_port;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	605a      	str	r2, [r3, #4]
  device->csn_pin = csn_pin;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	821a      	strh	r2, [r3, #16]
  device->ce_port = ce_port;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	609a      	str	r2, [r3, #8]
  device->ce_pin = ce_pin;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	825a      	strh	r2, [r3, #18]

  nRF24_CSN_State(device, GPIO_PIN_SET);
 80006de:	2101      	movs	r1, #1
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff ffd4 	bl	800068e <nRF24_CSN_State>
  nRF24_CE_State(device, GPIO_PIN_RESET);
 80006e6:	2100      	movs	r1, #0
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f7ff ffbe 	bl	800066a <nRF24_CE_State>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(nRF24_Handler_t *device, uint8_t data) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af02      	add	r7, sp, #8
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	70fb      	strb	r3, [r7, #3]
  uint8_t rxData;
  HAL_SPI_TransmitReceive(device->hspi, &data, &rxData, 1, 10000);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f107 020f 	add.w	r2, r7, #15
 800070a:	1cf9      	adds	r1, r7, #3
 800070c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	f001 fe88 	bl	8002428 <HAL_SPI_TransmitReceive>
  return rxData;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(nRF24_Handler_t *device, uint8_t reg) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800072e:	2100      	movs	r1, #0
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ffac 	bl	800068e <nRF24_CSN_State>
  nRF24_LL_RW(device, reg & nRF24_MASK_REG_MAP);
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	f003 031f 	and.w	r3, r3, #31
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ffd8 	bl	80006f6 <nRF24_LL_RW>
  value = nRF24_LL_RW(device, nRF24_CMD_NOP);
 8000746:	21ff      	movs	r1, #255	; 0xff
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffd4 	bl	80006f6 <nRF24_LL_RW>
 800074e:	4603      	mov	r3, r0
 8000750:	73fb      	strb	r3, [r7, #15]
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8000752:	2101      	movs	r1, #1
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff9a 	bl	800068e <nRF24_CSN_State>

  return value;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <nRF24_WriteReg>:

void nRF24_WriteReg(nRF24_Handler_t *device, uint8_t reg, uint8_t value) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff89 	bl	800068e <nRF24_CSN_State>
  if (reg < nRF24_CMD_W_REGISTER)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b1f      	cmp	r3, #31
 8000780:	d812      	bhi.n	80007a8 <nRF24_WriteReg+0x44>
  {
    /* This is a register access */
    nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	b25b      	sxtb	r3, r3
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffad 	bl	80006f6 <nRF24_LL_RW>
    nRF24_LL_RW(device, value);
 800079c:	78bb      	ldrb	r3, [r7, #2]
 800079e:	4619      	mov	r1, r3
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffa8 	bl	80006f6 <nRF24_LL_RW>
 80007a6:	e015      	b.n	80007d4 <nRF24_WriteReg+0x70>
  }
  else
  {
    /* This is a single byte command or future command/register */
    nRF24_LL_RW(device, reg);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ffa2 	bl	80006f6 <nRF24_LL_RW>
    if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	2be1      	cmp	r3, #225	; 0xe1
 80007b6:	d00d      	beq.n	80007d4 <nRF24_WriteReg+0x70>
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2be2      	cmp	r3, #226	; 0xe2
 80007bc:	d00a      	beq.n	80007d4 <nRF24_WriteReg+0x70>
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2be3      	cmp	r3, #227	; 0xe3
 80007c2:	d007      	beq.n	80007d4 <nRF24_WriteReg+0x70>
      (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP))
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d004      	beq.n	80007d4 <nRF24_WriteReg+0x70>
    {
      /* Send register value */
      nRF24_LL_RW(device, value);
 80007ca:	78bb      	ldrb	r3, [r7, #2]
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff91 	bl	80006f6 <nRF24_LL_RW>
    }
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 80007d4:	2101      	movs	r1, #1
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff59 	bl	800068e <nRF24_CSN_State>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <nRF24_ReadMBReg>:

void nRF24_ReadMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	461a      	mov	r2, r3
 80007f0:	460b      	mov	r3, r1
 80007f2:	72fb      	strb	r3, [r7, #11]
 80007f4:	4613      	mov	r3, r2
 80007f6:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 80007f8:	2100      	movs	r1, #0
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff ff47 	bl	800068e <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	4619      	mov	r1, r3
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f7ff ff76 	bl	80006f6 <nRF24_LL_RW>
  while (count--)
 800080a:	e008      	b.n	800081e <nRF24_ReadMBReg+0x3a>
  {
    *pBuf++ = nRF24_LL_RW(device, nRF24_CMD_NOP);
 800080c:	687c      	ldr	r4, [r7, #4]
 800080e:	1c63      	adds	r3, r4, #1
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	21ff      	movs	r1, #255	; 0xff
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ff6e 	bl	80006f6 <nRF24_LL_RW>
 800081a:	4603      	mov	r3, r0
 800081c:	7023      	strb	r3, [r4, #0]
  while (count--)
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	72ba      	strb	r2, [r7, #10]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f1      	bne.n	800080c <nRF24_ReadMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8000828:	2101      	movs	r1, #1
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff ff2f 	bl	800068e <nRF24_CSN_State>
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}

08000838 <nRF24_WriteMBReg>:

void nRF24_WriteMBReg(nRF24_Handler_t *device, uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	72fb      	strb	r3, [r7, #11]
 8000848:	4613      	mov	r3, r2
 800084a:	72bb      	strb	r3, [r7, #10]
  nRF24_CSN_State(device, GPIO_PIN_RESET);
 800084c:	2100      	movs	r1, #0
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f7ff ff1d 	bl	800068e <nRF24_CSN_State>
  nRF24_LL_RW(device, reg);
 8000854:	7afb      	ldrb	r3, [r7, #11]
 8000856:	4619      	mov	r1, r3
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff ff4c 	bl	80006f6 <nRF24_LL_RW>
  while (count--)
 800085e:	e007      	b.n	8000870 <nRF24_WriteMBReg+0x38>
  {
    nRF24_LL_RW(device, *pBuf++);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff ff43 	bl	80006f6 <nRF24_LL_RW>
  while (count--)
 8000870:	7abb      	ldrb	r3, [r7, #10]
 8000872:	1e5a      	subs	r2, r3, #1
 8000874:	72ba      	strb	r2, [r7, #10]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f2      	bne.n	8000860 <nRF24_WriteMBReg+0x28>
  }
  nRF24_CSN_State(device, GPIO_PIN_SET);
 800087a:	2101      	movs	r1, #1
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f7ff ff06 	bl	800068e <nRF24_CSN_State>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <nRF24_Init>:

void nRF24_Init(nRF24_Handler_t *device) {
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  /* Write to registers their initial values */
  nRF24_WriteReg(device, nRF24_REG_CONFIG, 0x08);
 8000892:	2208      	movs	r2, #8
 8000894:	2100      	movs	r1, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ff64 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x3F);
 800089c:	223f      	movs	r2, #63	; 0x3f
 800089e:	2101      	movs	r1, #1
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff5f 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, 0x03);
 80008a6:	2203      	movs	r2, #3
 80008a8:	2102      	movs	r1, #2
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff5a 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, 0x03);
 80008b0:	2203      	movs	r2, #3
 80008b2:	2103      	movs	r1, #3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff55 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_SETUP_RETR, 0x03);
 80008ba:	2203      	movs	r2, #3
 80008bc:	2104      	movs	r1, #4
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff50 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_CH, 0x02);
 80008c4:	2202      	movs	r2, #2
 80008c6:	2105      	movs	r1, #5
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff4b 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, 0x0E);
 80008ce:	220e      	movs	r2, #14
 80008d0:	2106      	movs	r1, #6
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ff46 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_STATUS, 0x00);
 80008d8:	2200      	movs	r2, #0
 80008da:	2107      	movs	r1, #7
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff41 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P0, 0x00);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2111      	movs	r1, #17
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff3c 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P1, 0x00);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2112      	movs	r1, #18
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff37 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P2, 0x00);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2113      	movs	r1, #19
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff32 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P3, 0x00);
 8000900:	2200      	movs	r2, #0
 8000902:	2114      	movs	r1, #20
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff2d 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P4, 0x00);
 800090a:	2200      	movs	r2, #0
 800090c:	2115      	movs	r1, #21
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff28 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_RX_PW_P5, 0x00);
 8000914:	2200      	movs	r2, #0
 8000916:	2116      	movs	r1, #22
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff23 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_DYNPD, 0x00);
 800091e:	2200      	movs	r2, #0
 8000920:	211c      	movs	r1, #28
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff1e 	bl	8000764 <nRF24_WriteReg>
  nRF24_WriteReg(device, nRF24_REG_FEATURE, 0x00);
 8000928:	2200      	movs	r2, #0
 800092a:	211d      	movs	r1, #29
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff19 	bl	8000764 <nRF24_WriteReg>

  /* Clear the FIFO's */
  nRF24_FlushRX(device);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f9a3 	bl	8000c7e <nRF24_FlushRX>
  nRF24_FlushTX(device);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f993 	bl	8000c64 <nRF24_FlushTX>

  /* Clear any pending interrupt flags */
  nRF24_ClearIRQFlags(device);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f9aa 	bl	8000c98 <nRF24_ClearIRQFlags>

  /* Deassert CSN pin (chip release) */
  nRF24_CSN_State(device, GPIO_PIN_SET);
 8000944:	2101      	movs	r1, #1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fea1 	bl	800068e <nRF24_CSN_State>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <nRF24_SetPowerMode>:
  }

  return 1;
}

void nRF24_SetPowerMode(nRF24_Handler_t *device, uint8_t mode) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  reg = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 8000960:	2100      	movs	r1, #0
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fedd 	bl	8000722 <nRF24_ReadReg>
 8000968:	4603      	mov	r3, r0
 800096a:	73fb      	strb	r3, [r7, #15]
  if (mode == nRF24_PWR_UP)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d104      	bne.n	800097c <nRF24_SetPowerMode+0x28>
  {
    /* Set the PWR_UP bit of CONFIG register to wake the transceiver */
    /* It goes into Stanby-I mode with consumption about 26uA */
    reg |= nRF24_CONFIG_PWR_UP;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e003      	b.n	8000984 <nRF24_SetPowerMode+0x30>
  } else {
    /* Clear the PWR_UP bit of CONFIG register to put the transceiver */
    /* into power down mode with consumption about 900nA */
    reg &= ~nRF24_CONFIG_PWR_UP;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	f023 0302 	bic.w	r3, r3, #2
 8000982:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff feea 	bl	8000764 <nRF24_WriteReg>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <nRF24_SetOperationalMode>:

void nRF24_SetOperationalMode(nRF24_Handler_t *device, uint8_t mode) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  /* Configure PRIM_RX bit of the CONFIG register */
  reg  = nRF24_ReadReg(device, nRF24_REG_CONFIG);
 80009a4:	2100      	movs	r1, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff febb 	bl	8000722 <nRF24_ReadReg>
 80009ac:	4603      	mov	r3, r0
 80009ae:	73fb      	strb	r3, [r7, #15]
  reg &= ~nRF24_CONFIG_PRIM_RX;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
  reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80009b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_CONFIG, reg);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fec6 	bl	8000764 <nRF24_WriteReg>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <nRF24_SetAddr>:

void nRF24_SetAddrWidth(nRF24_Handler_t *device, uint8_t addr_width) {
  nRF24_WriteReg(device, nRF24_REG_SETUP_AW, addr_width - 2);
}

void nRF24_SetAddr(nRF24_Handler_t *device, uint8_t pipe, uint8_t *addr) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
  uint8_t addr_width;

  /* RX_ADDR_Px register */
  switch (pipe)
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	f200 809c 	bhi.w	8000b2e <nRF24_SetAddr+0x14e>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <nRF24_SetAddr+0x1c>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a19 	.word	0x08000a19
 8000a00:	08000a6f 	.word	0x08000a6f
 8000a04:	08000ac5 	.word	0x08000ac5
 8000a08:	08000ac5 	.word	0x08000ac5
 8000a0c:	08000ac5 	.word	0x08000ac5
 8000a10:	08000ac5 	.word	0x08000ac5
 8000a14:	08000ad9 	.word	0x08000ad9
  {
    case nRF24_PIPE0:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8000a18:	2103      	movs	r1, #3
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fe81 	bl	8000722 <nRF24_ReadReg>
 8000a20:	4603      	mov	r3, r0
 8000a22:	3301      	adds	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fe2c 	bl	800068e <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <nRF24_SetAddr+0x158>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fe56 	bl	80006f6 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4619      	mov	r1, r3
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fe4e 	bl	80006f6 <nRF24_LL_RW>
      } while (addr_width--);
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	75fa      	strb	r2, [r7, #23]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f2      	bne.n	8000a4a <nRF24_SetAddr+0x6a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8000a64:	2101      	movs	r1, #1
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fe11 	bl	800068e <nRF24_CSN_State>
      break;
 8000a6c:	e060      	b.n	8000b30 <nRF24_SetAddr+0x150>
    case nRF24_PIPE1:
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8000a6e:	2103      	movs	r1, #3
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fe56 	bl	8000722 <nRF24_ReadReg>
 8000a76:	4603      	mov	r3, r0
 8000a78:	3301      	adds	r3, #1
 8000a7a:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8000a84:	2100      	movs	r1, #0
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fe01 	bl	800068e <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000a8c:	7afb      	ldrb	r3, [r7, #11]
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <nRF24_SetAddr+0x158>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fe2b 	bl	80006f6 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f7ff fe23 	bl	80006f6 <nRF24_LL_RW>
      } while (addr_width--);
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	75fa      	strb	r2, [r7, #23]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f2      	bne.n	8000aa0 <nRF24_SetAddr+0xc0>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8000aba:	2101      	movs	r1, #1
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fde6 	bl	800068e <nRF24_CSN_State>
      break;
 8000ac2:	e035      	b.n	8000b30 <nRF24_SetAddr+0x150>
    case nRF24_PIPE2:
    case nRF24_PIPE3:
    case nRF24_PIPE4:
    case nRF24_PIPE5:
      /* Write address LSBbyte (only first byte from the addr buffer) */
      nRF24_WriteReg(device, nRF24_ADDR_REGS[pipe], *addr);
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <nRF24_SetAddr+0x158>)
 8000ac8:	5cd1      	ldrb	r1, [r2, r3]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fe47 	bl	8000764 <nRF24_WriteReg>
      break;
 8000ad6:	e02b      	b.n	8000b30 <nRF24_SetAddr+0x150>
    case nRF24_PIPETX:
      //nRF24_WriteMBReg(device, nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, addr, 5);
      /* Get address width */
      addr_width = nRF24_ReadReg(device, nRF24_REG_SETUP_AW) + 1;
 8000ad8:	2103      	movs	r1, #3
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fe21 	bl	8000722 <nRF24_ReadReg>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
      /* Write address in reverse order (LSByte first) */
      addr += addr_width;
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	607b      	str	r3, [r7, #4]
      nRF24_CSN_State(device, GPIO_PIN_RESET);
 8000aee:	2100      	movs	r1, #0
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fdcc 	bl	800068e <nRF24_CSN_State>
      nRF24_LL_RW(device, nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <nRF24_SetAddr+0x158>)
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fdf6 	bl	80006f6 <nRF24_LL_RW>
      do {
        nRF24_LL_RW(device, *addr--);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdee 	bl	80006f6 <nRF24_LL_RW>
      } while (addr_width--);
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	1e5a      	subs	r2, r3, #1
 8000b1e:	75fa      	strb	r2, [r7, #23]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f2      	bne.n	8000b0a <nRF24_SetAddr+0x12a>
      nRF24_CSN_State(device, GPIO_PIN_SET);
 8000b24:	2101      	movs	r1, #1
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff fdb1 	bl	800068e <nRF24_CSN_State>
      break;
 8000b2c:	e000      	b.n	8000b30 <nRF24_SetAddr+0x150>
      break;
    default:
      /* Incorrect pipe number -> do nothing */
      break;
 8000b2e:	bf00      	nop
  }
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08003778 	.word	0x08003778

08000b3c <nRF24_SetRXPipe>:
  reg &= ~nRF24_MASK_DATARATE;
  reg |= data_rate;
  nRF24_WriteReg(device, nRF24_REG_RF_SETUP, reg);
}

void nRF24_SetRXPipe(nRF24_Handler_t *device, uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	70fb      	strb	r3, [r7, #3]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70bb      	strb	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	707b      	strb	r3, [r7, #1]
  uint8_t reg;

  /* Enable the specified pipe (EN_RXADDR register) */
  reg = (nRF24_ReadReg(device, nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000b56:	2102      	movs	r1, #2
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fde2 	bl	8000722 <nRF24_ReadReg>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	2101      	movs	r1, #1
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b76:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_EN_RXADDR, reg);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fdf0 	bl	8000764 <nRF24_WriteReg>

  /* Set RX payload length (RX_PW_Px register) */
  nRF24_WriteReg(device, nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	4a1a      	ldr	r2, [pc, #104]	; (8000bf0 <nRF24_SetRXPipe+0xb4>)
 8000b88:	5cd1      	ldrb	r1, [r2, r3]
 8000b8a:	787b      	ldrb	r3, [r7, #1]
 8000b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fde5 	bl	8000764 <nRF24_WriteReg>

  /* Set auto acknowledgment for a specified pipe (EN_AA register) */
  reg = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fdc0 	bl	8000722 <nRF24_ReadReg>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  if (aa_state == nRF24_AA_ON)
 8000ba6:	78bb      	ldrb	r3, [r7, #2]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d10a      	bne.n	8000bc2 <nRF24_SetRXPipe+0x86>
  {
    reg |=  (1 << pipe);
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e00b      	b.n	8000bda <nRF24_SetRXPipe+0x9e>
  } else {
    reg &= ~(1 << pipe);
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]
  }
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fdbf 	bl	8000764 <nRF24_WriteReg>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08003770 	.word	0x08003770

08000bf4 <nRF24_DisableAA>:
  reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
  reg |= (1 << pipe);
  nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
}

void nRF24_DisableAA(nRF24_Handler_t *device, uint8_t pipe) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
  uint8_t reg;

  if (pipe > 5)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d905      	bls.n	8000c12 <nRF24_DisableAA+0x1e>
  {
    /* Disable Auto-ACK for ALL pipes */
    nRF24_WriteReg(device, nRF24_REG_EN_AA, 0x00);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fdaa 	bl	8000764 <nRF24_WriteReg>
    /* Clear bit in the EN_AA register */
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
    reg &= ~(1 << pipe);
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
  }
}
 8000c10:	e017      	b.n	8000c42 <nRF24_DisableAA+0x4e>
    reg  = nRF24_ReadReg(device, nRF24_REG_EN_AA);
 8000c12:	2101      	movs	r1, #1
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fd84 	bl	8000722 <nRF24_ReadReg>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	73fb      	strb	r3, [r7, #15]
    reg &= ~(1 << pipe);
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	2201      	movs	r2, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c30:	4013      	ands	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(device, nRF24_REG_EN_AA, reg);
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fd91 	bl	8000764 <nRF24_WriteReg>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(nRF24_Handler_t *device) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  return nRF24_ReadReg(device, nRF24_REG_STATUS);
 8000c52:	2107      	movs	r1, #7
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fd64 	bl	8000722 <nRF24_ReadReg>
 8000c5a:	4603      	mov	r3, r0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <nRF24_FlushTX>:
  /* The PLOS counter is reset after write to RF_CH register */
  reg = nRF24_ReadReg(device, nRF24_REG_RF_CH);
  nRF24_WriteReg(device, nRF24_REG_RF_CH, reg);
}

void nRF24_FlushTX(nRF24_Handler_t *device) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000c6c:	22ff      	movs	r2, #255	; 0xff
 8000c6e:	21e1      	movs	r1, #225	; 0xe1
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fd77 	bl	8000764 <nRF24_WriteReg>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <nRF24_FlushRX>:

void nRF24_FlushRX(nRF24_Handler_t *device) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  nRF24_WriteReg(device, nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	21e2      	movs	r1, #226	; 0xe2
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fd6a 	bl	8000764 <nRF24_WriteReg>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(nRF24_Handler_t *device) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint8_t reg;

  /* Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register */
  reg  = nRF24_ReadReg(device, nRF24_REG_STATUS);
 8000ca0:	2107      	movs	r1, #7
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fd3d 	bl	8000722 <nRF24_ReadReg>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
  reg |= nRF24_MASK_STATUS_IRQ;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000cb2:	73fb      	strb	r3, [r7, #15]
  nRF24_WriteReg(device, nRF24_REG_STATUS, reg);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2107      	movs	r1, #7
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fd52 	bl	8000764 <nRF24_WriteReg>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <nRF24_WritePayload>:

void nRF24_WritePayload(nRF24_Handler_t *device, uint8_t *pBuf, uint8_t length) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
  nRF24_WriteMBReg(device, nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	21a0      	movs	r1, #160	; 0xa0
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fdab 	bl	8000838 <nRF24_WriteMBReg>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_MspInit+0x5c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_MspInit+0x60>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_MspInit+0x60>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0x88>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000db4:	f000 fd10 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_SPI_MspInit+0x90>)
 8000dcc:	f000 fd04 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0xe8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d15f      	bne.n	8000ec4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <HAL_UART_MspInit+0xec>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <HAL_UART_MspInit+0xf0>)
 8000e4a:	f000 fcc5 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0xf0>)
 8000e64:	f000 fcb8 	bl	80017d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_UART_MspInit+0xf8>)
 8000e6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000e9a:	f000 f9fb 	bl	8001294 <HAL_DMA_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000ea4:	f7ff fbdc 	bl	8000660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_UART_MspInit+0xf4>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2025      	movs	r0, #37	; 0x25
 8000eba:	f000 f9b4 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ebe:	2025      	movs	r0, #37	; 0x25
 8000ec0:	f000 f9cd 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	40020058 	.word	0x40020058

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f88b 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <DMA1_Channel5_IRQHandler+0x10>)
 8000f36:	f000 fb1b 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000d0 	.word	0x200000d0

08000f44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <USART1_IRQHandler+0x14>)
 8000f4a:	f001 fd39 	bl	80029c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart1);
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART1_IRQHandler+0x14>)
 8000f50:	f7ff fb44 	bl	80005dc <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000088 	.word	0x20000088

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff fff8 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6e:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f84:	4c09      	ldr	r4, [pc, #36]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f002 fbb5 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff f8d9 	bl	800014c <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fa4:	080037b4 	.word	0x080037b4
  ldr r2, =_sbss
 8000fa8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fac:	200001c0 	.word	0x200001c0

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f923 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe8c 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f93b 	bl	800127a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f903 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008
 8001038:	20000010 	.word	0x20000010
 800103c:	2000000c 	.word	0x2000000c

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000010 	.word	0x20000010
 8001060:	200001bc 	.word	0x200001bc

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	200001bc 	.word	0x200001bc

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff90 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff2d 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff42 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff35 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e043      	b.n	8001332 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_DMA_Init+0xa8>)
 80012b2:	4413      	add	r3, r2
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_DMA_Init+0xac>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_DMA_Init+0xb0>)
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	bffdfff8 	.word	0xbffdfff8
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_DMA_Start_IT+0x20>
 8001364:	2302      	movs	r3, #2
 8001366:	e04b      	b.n	8001400 <HAL_DMA_Start_IT+0xb8>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d13a      	bne.n	80013f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f9eb 	bl	800177c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 020e 	orr.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00f      	b.n	80013e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 020a 	orr.w	r2, r2, #10
 80013de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e005      	b.n	80013fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2204      	movs	r2, #4
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e020      	b.n	8001474 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 020e 	bic.w	r2, r2, #14
 8001440:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d005      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e051      	b.n	8001548 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_DMA_Abort_IT+0xd4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_Abort_IT+0xa2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_DMA_Abort_IT+0xd8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <HAL_DMA_Abort_IT+0x9e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <HAL_DMA_Abort_IT+0xdc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_Abort_IT+0x98>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_DMA_Abort_IT+0xe0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_Abort_IT+0x92>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_DMA_Abort_IT+0xe4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00a      	beq.n	800150c <HAL_DMA_Abort_IT+0x8c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_DMA_Abort_IT+0xe8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_DMA_Abort_IT+0x86>
 8001500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001504:	e00e      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800150a:	e00b      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	e008      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	e005      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	e002      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 800151e:	2310      	movs	r3, #16
 8001520:	e000      	b.n	8001524 <HAL_DMA_Abort_IT+0xa4>
 8001522:	2301      	movs	r3, #1
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_DMA_Abort_IT+0xec>)
 8001526:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
    } 
  }
  return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020008 	.word	0x40020008
 8001558:	4002001c 	.word	0x4002001c
 800155c:	40020030 	.word	0x40020030
 8001560:	40020044 	.word	0x40020044
 8001564:	40020058 	.word	0x40020058
 8001568:	4002006c 	.word	0x4002006c
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	2204      	movs	r2, #4
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d04f      	beq.n	8001638 <HAL_DMA_IRQHandler+0xc8>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d04a      	beq.n	8001638 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0204 	bic.w	r2, r2, #4
 80015be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a66      	ldr	r2, [pc, #408]	; (8001760 <HAL_DMA_IRQHandler+0x1f0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d029      	beq.n	800161e <HAL_DMA_IRQHandler+0xae>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_DMA_IRQHandler+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <HAL_DMA_IRQHandler+0xaa>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_DMA_IRQHandler+0x1f8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01a      	beq.n	8001614 <HAL_DMA_IRQHandler+0xa4>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a62      	ldr	r2, [pc, #392]	; (800176c <HAL_DMA_IRQHandler+0x1fc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d012      	beq.n	800160e <HAL_DMA_IRQHandler+0x9e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_DMA_IRQHandler+0x200>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00a      	beq.n	8001608 <HAL_DMA_IRQHandler+0x98>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a5f      	ldr	r2, [pc, #380]	; (8001774 <HAL_DMA_IRQHandler+0x204>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d102      	bne.n	8001602 <HAL_DMA_IRQHandler+0x92>
 80015fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001600:	e00e      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 8001602:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001606:	e00b      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 8001608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800160c:	e008      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 800160e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001612:	e005      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	e002      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 800161a:	2340      	movs	r3, #64	; 0x40
 800161c:	e000      	b.n	8001620 <HAL_DMA_IRQHandler+0xb0>
 800161e:	2304      	movs	r3, #4
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_DMA_IRQHandler+0x208>)
 8001622:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8094 	beq.w	8001756 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001636:	e08e      	b.n	8001756 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2202      	movs	r2, #2
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d056      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x186>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d051      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10b      	bne.n	8001678 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020a 	bic.w	r2, r2, #10
 800166e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_DMA_IRQHandler+0x1f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d029      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x166>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a37      	ldr	r2, [pc, #220]	; (8001764 <HAL_DMA_IRQHandler+0x1f4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x162>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a35      	ldr	r2, [pc, #212]	; (8001768 <HAL_DMA_IRQHandler+0x1f8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x15c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_DMA_IRQHandler+0x1fc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d012      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x156>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_DMA_IRQHandler+0x200>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x150>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a31      	ldr	r2, [pc, #196]	; (8001774 <HAL_DMA_IRQHandler+0x204>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_DMA_IRQHandler+0x14a>
 80016b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016be:	e00b      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c4:	e008      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ca:	e005      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	e002      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016d2:	2320      	movs	r3, #32
 80016d4:	e000      	b.n	80016d8 <HAL_DMA_IRQHandler+0x168>
 80016d6:	2302      	movs	r3, #2
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_DMA_IRQHandler+0x208>)
 80016da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d034      	beq.n	8001756 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016f4:	e02f      	b.n	8001756 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2208      	movs	r2, #8
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d028      	beq.n	8001758 <HAL_DMA_IRQHandler+0x1e8>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d023      	beq.n	8001758 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020e 	bic.w	r2, r2, #14
 800171e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	2101      	movs	r1, #1
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
    }
  }
  return;
 8001756:	bf00      	nop
 8001758:	bf00      	nop
}
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020008 	.word	0x40020008
 8001764:	4002001c 	.word	0x4002001c
 8001768:	40020030 	.word	0x40020030
 800176c:	40020044 	.word	0x40020044
 8001770:	40020058 	.word	0x40020058
 8001774:	4002006c 	.word	0x4002006c
 8001778:	40020000 	.word	0x40020000

0800177c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d108      	bne.n	80017bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ba:	e007      	b.n	80017cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	60da      	str	r2, [r3, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e161      	b.n	8001ab0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ec:	2201      	movs	r2, #1
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8150 	bne.w	8001aaa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a97      	ldr	r2, [pc, #604]	; (8001a6c <HAL_GPIO_Init+0x294>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d05e      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001814:	4a95      	ldr	r2, [pc, #596]	; (8001a6c <HAL_GPIO_Init+0x294>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d875      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800181a:	4a95      	ldr	r2, [pc, #596]	; (8001a70 <HAL_GPIO_Init+0x298>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d058      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001820:	4a93      	ldr	r2, [pc, #588]	; (8001a70 <HAL_GPIO_Init+0x298>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d86f      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001826:	4a93      	ldr	r2, [pc, #588]	; (8001a74 <HAL_GPIO_Init+0x29c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d052      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 800182c:	4a91      	ldr	r2, [pc, #580]	; (8001a74 <HAL_GPIO_Init+0x29c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d869      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001832:	4a91      	ldr	r2, [pc, #580]	; (8001a78 <HAL_GPIO_Init+0x2a0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d04c      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001838:	4a8f      	ldr	r2, [pc, #572]	; (8001a78 <HAL_GPIO_Init+0x2a0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d863      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800183e:	4a8f      	ldr	r2, [pc, #572]	; (8001a7c <HAL_GPIO_Init+0x2a4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d046      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001844:	4a8d      	ldr	r2, [pc, #564]	; (8001a7c <HAL_GPIO_Init+0x2a4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d85d      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d82a      	bhi.n	80018a4 <HAL_GPIO_Init+0xcc>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d859      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_GPIO_Init+0x80>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018bf 	.word	0x080018bf
 8001864:	08001901 	.word	0x08001901
 8001868:	08001907 	.word	0x08001907
 800186c:	08001907 	.word	0x08001907
 8001870:	08001907 	.word	0x08001907
 8001874:	08001907 	.word	0x08001907
 8001878:	08001907 	.word	0x08001907
 800187c:	08001907 	.word	0x08001907
 8001880:	08001907 	.word	0x08001907
 8001884:	08001907 	.word	0x08001907
 8001888:	08001907 	.word	0x08001907
 800188c:	08001907 	.word	0x08001907
 8001890:	08001907 	.word	0x08001907
 8001894:	08001907 	.word	0x08001907
 8001898:	08001907 	.word	0x08001907
 800189c:	080018b5 	.word	0x080018b5
 80018a0:	080018c9 	.word	0x080018c9
 80018a4:	4a76      	ldr	r2, [pc, #472]	; (8001a80 <HAL_GPIO_Init+0x2a8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018aa:	e02c      	b.n	8001906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e029      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3304      	adds	r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e024      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	3308      	adds	r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e01f      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	330c      	adds	r3, #12
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e01a      	b.n	8001908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018da:	2304      	movs	r3, #4
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e013      	b.n	8001908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	611a      	str	r2, [r3, #16]
          break;
 80018f2:	e009      	b.n	8001908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	615a      	str	r2, [r3, #20]
          break;
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x130>
          break;
 8001906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d801      	bhi.n	8001912 <HAL_GPIO_Init+0x13a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	e001      	b.n	8001916 <HAL_GPIO_Init+0x13e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d802      	bhi.n	8001924 <HAL_GPIO_Init+0x14c>
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0x152>
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	3b08      	subs	r3, #8
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	210f      	movs	r1, #15
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80a9 	beq.w	8001aaa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001958:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_GPIO_Init+0x2ac>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2ac>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_GPIO_Init+0x2ac>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001970:	4a45      	ldr	r2, [pc, #276]	; (8001a88 <HAL_GPIO_Init+0x2b0>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a3d      	ldr	r2, [pc, #244]	; (8001a8c <HAL_GPIO_Init+0x2b4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1e0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <HAL_GPIO_Init+0x2b8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3b      	ldr	r2, [pc, #236]	; (8001a94 <HAL_GPIO_Init+0x2bc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1d8>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b8:	2300      	movs	r3, #0
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ca:	492f      	ldr	r1, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x2b0>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	492b      	ldr	r1, [pc, #172]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4921      	ldr	r1, [pc, #132]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	491d      	ldr	r1, [pc, #116]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4917      	ldr	r1, [pc, #92]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4913      	ldr	r1, [pc, #76]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01f      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	490d      	ldr	r1, [pc, #52]	; (8001a98 <HAL_GPIO_Init+0x2c0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e01f      	b.n	8001aaa <HAL_GPIO_Init+0x2d2>
 8001a6a:	bf00      	nop
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10110000 	.word	0x10110000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4909      	ldr	r1, [pc, #36]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f ae96 	bne.w	80017ec <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	372c      	adds	r7, #44	; 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e272      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x12c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e24c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x76>
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xbc>
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a67      	ldr	r2, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fa42 	bl	8001064 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fa3e 	bl	8001064 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e200      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe4>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa2e 	bl	8001064 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa2a 	bl	8001064 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1ec      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x10c>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c0      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f9e3 	bl	8001064 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f9df 	bl	8001064 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9c2 	bl	8001064 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f9be 	bl	8001064 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e180      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f9a2 	bl	8001064 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff f99e 	bl	8001064 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e160      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 face 	bl	80022e4 <RCC_Delay>
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff f988 	bl	8001064 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff f984 	bl	8001064 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e146      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	42420000 	.word	0x42420000
 8001d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e9      	bne.n	8001d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a6 	beq.w	8001ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a87      	ldr	r2, [pc, #540]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f945 	bl	8001064 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff f941 	bl	8001064 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e103      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e01c      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x356>
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a60      	ldr	r2, [pc, #384]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff f8f5 	bl	8001064 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f8f1 	bl	8001064 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0b1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <HAL_RCC_OscConfig+0x37e>
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f8df 	bl	8001064 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f8db 	bl	8001064 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e09b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d061      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d146      	bne.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f8af 	bl	8001064 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff f8ab 	bl	8001064 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e06d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4921      	ldr	r1, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	430b      	orrs	r3, r1
 8001f56:	491b      	ldr	r1, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f87f 	bl	8001064 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f87b 	bl	8001064 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e03d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
 8001f88:	e035      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff f868 	bl	8001064 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff f864 	bl	8001064 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e026      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
 8001fb6:	e01e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e019      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x500>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7fe ffb6 	bl	8001064 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe ffb2 	bl	8001064 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff14 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08003780 	.word	0x08003780
 80021d0:	20000008 	.word	0x20000008
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e027      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e027      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08003798 	.word	0x08003798
 8002278:	080037a8 	.word	0x080037a8
 800227c:	003d0900 	.word	0x003d0900

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_RCC_GetHCLKFreq+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000008 	.word	0x20000008

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002298:	f7ff fff2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08003790 	.word	0x08003790

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff ffde 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08003790 	.word	0x08003790

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000008 	.word	0x20000008
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e076      	b.n	8002420 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002342:	d009      	beq.n	8002358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
 800234a:	e005      	b.n	8002358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fcec 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	ea42 0103 	orr.w	r1, r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	0c1a      	lsrs	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f002 0204 	and.w	r2, r2, #4
 80023fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002436:	2301      	movs	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_SPI_TransmitReceive+0x26>
 800244a:	2302      	movs	r3, #2
 800244c:	e198      	b.n	8002780 <HAL_SPI_TransmitReceive+0x358>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002456:	f7fe fe05 	bl	8001064 <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00f      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x70>
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247e:	d107      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x68>
 8002488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800248c:	2b04      	cmp	r3, #4
 800248e:	d003      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002496:	e16d      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x82>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x82>
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024b0:	e160      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d003      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	887a      	ldrh	r2, [r7, #2]
 80024ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d007      	beq.n	800251a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002522:	d17c      	bne.n	800261e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x10a>
 800252c:	8b7b      	ldrh	r3, [r7, #26]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d16a      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	1c9a      	adds	r2, r3, #2
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002556:	e057      	b.n	8002608 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d11b      	bne.n	800259e <HAL_SPI_TransmitReceive+0x176>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_SPI_TransmitReceive+0x176>
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d113      	bne.n	800259e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d119      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x1b8>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d014      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	b292      	uxth	r2, r2
 80025c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	1c9a      	adds	r2, r3, #2
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025e0:	f7fe fd40 	bl	8001064 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d80b      	bhi.n	8002608 <HAL_SPI_TransmitReceive+0x1e0>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d007      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002606:	e0b5      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1a2      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x130>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d19d      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x130>
 800261c:	e080      	b.n	8002720 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_SPI_TransmitReceive+0x204>
 8002626:	8b7b      	ldrh	r3, [r7, #26]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d16f      	bne.n	800270c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002652:	e05b      	b.n	800270c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d11c      	bne.n	800269c <HAL_SPI_TransmitReceive+0x274>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d017      	beq.n	800269c <HAL_SPI_TransmitReceive+0x274>
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d114      	bne.n	800269c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d119      	bne.n	80026de <HAL_SPI_TransmitReceive+0x2b6>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d014      	beq.n	80026de <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026da:	2301      	movs	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026de:	f7fe fcc1 	bl	8001064 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d803      	bhi.n	80026f6 <HAL_SPI_TransmitReceive+0x2ce>
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d102      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x2d4>
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800270a:	e033      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d19e      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x22c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d199      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f8b7 	bl	8002898 <SPI_EndRxTxTransaction>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800273c:	e01a      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800276a:	e003      	b.n	8002774 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800277c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002780:	4618      	mov	r0, r3
 8002782:	3730      	adds	r7, #48	; 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002798:	f7fe fc64 	bl	8001064 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027a8:	f7fe fc5c 	bl	8001064 <HAL_GetTick>
 80027ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	0d1b      	lsrs	r3, r3, #20
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027be:	e054      	b.n	800286a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d050      	beq.n	800286a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027c8:	f7fe fc4c 	bl	8001064 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d902      	bls.n	80027de <SPI_WaitFlagStateUntilTimeout+0x56>
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d13d      	bne.n	800285a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f6:	d111      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x94>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002800:	d004      	beq.n	800280c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d107      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d10f      	bne.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e017      	b.n	800288a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3b01      	subs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d19b      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000008 	.word	0x20000008

08002898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ff6a 	bl	8002788 <SPI_WaitFlagStateUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e000      	b.n	80028cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e042      	b.n	800296c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fa72 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fe63 	bl	80035e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800292c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800293c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800294c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d112      	bne.n	80029b4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_UART_Receive_DMA+0x26>
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00b      	b.n	80029b6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fbbe 	bl	800312c <UART_Start_Receive_DMA>
 80029b0:	4603      	mov	r3, r0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0ba      	sub	sp, #232	; 0xe8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_UART_IRQHandler+0x66>
 8002a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fd22 	bl	8003468 <UART_Receive_IT>
      return;
 8002a24:	e25b      	b.n	8002ede <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80de 	beq.w	8002bec <HAL_UART_IRQHandler+0x22c>
 8002a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80d1 	beq.w	8002bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_UART_IRQHandler+0xae>
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_UART_IRQHandler+0xd2>
 8002a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_UART_IRQHandler+0xf6>
 8002a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d011      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x126>
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f043 0208 	orr.w	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 81f2 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_UART_IRQHandler+0x14e>
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fcad 	bl	8003468 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_UART_IRQHandler+0x17a>
 8002b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04f      	beq.n	8002bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fbb7 	bl	80032ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d041      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1d9      	bne.n	8002b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	4a7e      	ldr	r2, [pc, #504]	; (8002da0 <HAL_UART_IRQHandler+0x3e0>)
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fc66 	bl	8001480 <HAL_DMA_Abort_IT>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e00e      	b.n	8002be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f99c 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00a      	b.n	8002be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f998 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e006      	b.n	8002be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f994 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002be6:	e175      	b.n	8002ed4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	bf00      	nop
    return;
 8002bea:	e173      	b.n	8002ed4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 814f 	bne.w	8002e94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8148 	beq.w	8002e94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8141 	beq.w	8002e94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80b6 	beq.w	8002da4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8145 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c56:	429a      	cmp	r2, r3
 8002c58:	f080 813e 	bcs.w	8002ed8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	f000 8088 	beq.w	8002d80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	330c      	adds	r3, #12
 8002c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c9c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ca8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1d9      	bne.n	8002c70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ce0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e1      	bne.n	8002cbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3314      	adds	r3, #20
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3314      	adds	r3, #20
 8002d18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e3      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e3      	bne.n	8002d3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fb44 	bl	8001408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8bf 	bl	8002f1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d9c:	e09c      	b.n	8002ed8 <HAL_UART_IRQHandler+0x518>
 8002d9e:	bf00      	nop
 8002da0:	08003373 	.word	0x08003373
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 808e 	beq.w	8002edc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8089 	beq.w	8002edc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dee:	647a      	str	r2, [r7, #68]	; 0x44
 8002df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e3      	bne.n	8002dca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3314      	adds	r3, #20
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	623b      	str	r3, [r7, #32]
   return(result);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e26:	633a      	str	r2, [r7, #48]	; 0x30
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e3      	bne.n	8002e02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	e853 3f00 	ldrex	r3, [r3]
 8002e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0310 	bic.w	r3, r3, #16
 8002e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e6c:	61fa      	str	r2, [r7, #28]
 8002e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e3      	bne.n	8002e48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f844 	bl	8002f1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e92:	e023      	b.n	8002edc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x4f4>
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa74 	bl	800339a <UART_Transmit_IT>
    return;
 8002eb2:	e014      	b.n	8002ede <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <HAL_UART_IRQHandler+0x51e>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fab3 	bl	8003438 <UART_EndTransmit_IT>
    return;
 8002ed2:	e004      	b.n	8002ede <HAL_UART_IRQHandler+0x51e>
    return;
 8002ed4:	bf00      	nop
 8002ed6:	e002      	b.n	8002ede <HAL_UART_IRQHandler+0x51e>
      return;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_UART_IRQHandler+0x51e>
      return;
 8002edc:	bf00      	nop
  }
}
 8002ede:	37e8      	adds	r7, #232	; 0xe8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b09c      	sub	sp, #112	; 0x70
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d172      	bne.n	8003032 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fda:	633a      	str	r2, [r7, #48]	; 0x30
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e5      	bne.n	8002fba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d119      	bne.n	8003032 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	60fb      	str	r3, [r7, #12]
   return(result);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f023 0310 	bic.w	r3, r3, #16
 8003014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800301e:	61fa      	str	r2, [r7, #28]
 8003020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	617b      	str	r3, [r7, #20]
   return(result);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b01      	cmp	r3, #1
 800303e:	d106      	bne.n	800304e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003048:	f7ff ff67 	bl	8002f1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800304c:	e002      	b.n	8003054 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800304e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003050:	f7fd fac4 	bl	80005dc <HAL_UART_RxCpltCallback>
}
 8003054:	bf00      	nop
 8003056:	3770      	adds	r7, #112	; 0x70
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff49 	bl	8002f1a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003088:	e002      	b.n	8003090 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff33 	bl	8002ef6 <HAL_UART_RxHalfCpltCallback>
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b21      	cmp	r3, #33	; 0x21
 80030ca:	d108      	bne.n	80030de <UART_DMAError+0x46>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2200      	movs	r2, #0
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80030d8:	68b8      	ldr	r0, [r7, #8]
 80030da:	f000 f8c1 	bl	8003260 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b22      	cmp	r3, #34	; 0x22
 80030fe:	d108      	bne.n	8003112 <UART_DMAError+0x7a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2200      	movs	r2, #0
 800310a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f000 f8ce 	bl	80032ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800311e:	68b8      	ldr	r0, [r7, #8]
 8003120:	f7ff fef2 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b098      	sub	sp, #96	; 0x60
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2222      	movs	r2, #34	; 0x22
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	4a3e      	ldr	r2, [pc, #248]	; (8003254 <UART_Start_Receive_DMA+0x128>)
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	4a3d      	ldr	r2, [pc, #244]	; (8003258 <UART_Start_Receive_DMA+0x12c>)
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	4a3c      	ldr	r2, [pc, #240]	; (800325c <UART_Start_Receive_DMA+0x130>)
 800316a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	2200      	movs	r2, #0
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	f7fe f8dc 	bl	8001348 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80031dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	657b      	str	r3, [r7, #84]	; 0x54
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003202:	63ba      	str	r2, [r7, #56]	; 0x38
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	617b      	str	r3, [r7, #20]
   return(result);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322c:	653b      	str	r3, [r7, #80]	; 0x50
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003236:	627a      	str	r2, [r7, #36]	; 0x24
 8003238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	61fb      	str	r3, [r7, #28]
   return(result);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3760      	adds	r7, #96	; 0x60
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	08002f31 	.word	0x08002f31
 8003258:	0800305d 	.word	0x0800305d
 800325c:	08003099 	.word	0x08003099

08003260 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	60bb      	str	r3, [r7, #8]
   return(result);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	61ba      	str	r2, [r7, #24]
 800328a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	613b      	str	r3, [r7, #16]
   return(result);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80032a4:	bf00      	nop
 80032a6:	3724      	adds	r7, #36	; 0x24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b095      	sub	sp, #84	; 0x54
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d6:	643a      	str	r2, [r7, #64]	; 0x40
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3314      	adds	r3, #20
 80032f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	64bb      	str	r3, [r7, #72]	; 0x48
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	2b01      	cmp	r3, #1
 8003324:	d119      	bne.n	800335a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	60bb      	str	r3, [r7, #8]
   return(result);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f023 0310 	bic.w	r3, r3, #16
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003346:	61ba      	str	r2, [r7, #24]
 8003348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6979      	ldr	r1, [r7, #20]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	613b      	str	r3, [r7, #16]
   return(result);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e5      	bne.n	8003326 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003368:	bf00      	nop
 800336a:	3754      	adds	r7, #84	; 0x54
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fdbb 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b21      	cmp	r3, #33	; 0x21
 80033ac:	d13e      	bne.n	800342c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d114      	bne.n	80033e2 <UART_Transmit_IT+0x48>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	1c9a      	adds	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	621a      	str	r2, [r3, #32]
 80033e0:	e008      	b.n	80033f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6211      	str	r1, [r2, #32]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4619      	mov	r1, r3
 8003402:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003416:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003426:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fd43 	bl	8002ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b22      	cmp	r3, #34	; 0x22
 800347a:	f040 80ae 	bne.w	80035da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d117      	bne.n	80034b8 <UART_Receive_IT+0x50>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d113      	bne.n	80034b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
 80034b6:	e026      	b.n	8003506 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d007      	beq.n	80034dc <UART_Receive_IT+0x74>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <UART_Receive_IT+0x82>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e008      	b.n	80034fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4619      	mov	r1, r3
 8003514:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003516:	2b00      	cmp	r3, #0
 8003518:	d15d      	bne.n	80035d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0220 	bic.w	r2, r2, #32
 8003528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	d135      	bne.n	80035cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	61bb      	str	r3, [r7, #24]
   return(result);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d10a      	bne.n	80035be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fca8 	bl	8002f1a <HAL_UARTEx_RxEventCallback>
 80035ca:	e002      	b.n	80035d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fd f805 	bl	80005dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e002      	b.n	80035dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	; 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800361e:	f023 030c 	bic.w	r3, r3, #12
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	430b      	orrs	r3, r1
 800362a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <UART_SetConfig+0x114>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7fe fe36 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	e002      	b.n	800365a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe fe1e 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8003658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009a      	lsls	r2, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <UART_SetConfig+0x118>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	0119      	lsls	r1, r3, #4
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009a      	lsls	r2, r3, #2
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <UART_SetConfig+0x118>)
 8003692:	fba3 0302 	umull	r0, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2064      	movs	r0, #100	; 0x64
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	3332      	adds	r3, #50	; 0x32
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <UART_SetConfig+0x118>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b0:	4419      	add	r1, r3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <UART_SetConfig+0x118>)
 80036ca:	fba3 0302 	umull	r0, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2064      	movs	r0, #100	; 0x64
 80036d2:	fb00 f303 	mul.w	r3, r0, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <UART_SetConfig+0x118>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	440a      	add	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40013800 	.word	0x40013800
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4d0c      	ldr	r5, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	f000 f822 	bl	8003758 <_init>
 8003714:	2600      	movs	r6, #0
 8003716:	4d0a      	ldr	r5, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	080037ac 	.word	0x080037ac
 800373c:	080037ac 	.word	0x080037ac
 8003740:	080037ac 	.word	0x080037ac
 8003744:	080037b0 	.word	0x080037b0

08003748 <memset>:
 8003748:	4603      	mov	r3, r0
 800374a:	4402      	add	r2, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
